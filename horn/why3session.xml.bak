<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="Yices" version="2.5.4" timelimit="1800" steplimit="0" memlimit="1000"/>
<prover id="1" name="Alt-Ergo" version="2.4.0" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="2" name="Eprover" version="2.5" timelimit="1800" steplimit="0" memlimit="1000"/>
<prover id="3" name="Spass" version="3.7" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="4" name="Z3" version="4.8.6" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="5" name="CVC4" version="1.7" timelimit="1" steplimit="0" memlimit="1000"/>
<file format="whyml">
<path name=".."/><path name="horn.mlw"/>
<theory name="Converts">
 <goal name="convertRStoAF&#39;vc" expl="VC for convertRStoAF">
 <proof prover="1"><result status="highfailure" time="0.01"/></proof>
 <proof prover="3"><result status="timeout" time="0.72"/></proof>
 <proof prover="4"><result status="highfailure" time="0.76" steps="989485"/></proof>
 <proof prover="5"><result status="timeout" time="0.77" steps="46350"/></proof>
 <transf name="split_vc" >
  <goal name="convertRStoAF&#39;vc.0" expl="postcondition">
  <proof prover="1"><result status="highfailure" time="0.01"/></proof>
  <proof prover="3"><result status="timeout" time="0.78"/></proof>
  <proof prover="4"><result status="highfailure" time="0.79" steps="992295"/></proof>
  <proof prover="5"><result status="timeout" time="1.00" steps="48728"/></proof>
  <transf name="split_vc" >
   <goal name="convertRStoAF&#39;vc.0.0" expl="postcondition">
   <proof prover="1" timelimit="5" memlimit="2000"><result status="highfailure" time="0.01"/></proof>
   <proof prover="3" timelimit="5" memlimit="2000"><result status="timeout" time="2.73"/></proof>
   <proof prover="4" timelimit="5" memlimit="2000"><result status="highfailure" time="2.80" steps="2109974"/></proof>
   <proof prover="5" timelimit="5" memlimit="2000"><result status="timeout" time="5.00" steps="226186"/></proof>
   <transf name="compute_hyp" >
    <goal name="convertRStoAF&#39;vc.0.0.0" expl="postcondition">
    <proof prover="1"><result status="highfailure" time="0.01"/></proof>
    <proof prover="3"><result status="timeout" time="1.00"/></proof>
    <proof prover="4"><result status="timeout" time="1.00" steps="1147064"/></proof>
    <proof prover="5"><result status="timeout" time="1.00" steps="68203"/></proof>
    <transf name="split_vc" >
     <goal name="convertRStoAF&#39;vc.0.0.0.0" expl="postcondition">
     <proof prover="1" timelimit="5" memlimit="2000"><result status="highfailure" time="0.01"/></proof>
     <proof prover="3" timelimit="30" memlimit="4000"><undone/></proof>
     <proof prover="4" timelimit="30" memlimit="4000"><result status="highfailure" time="26.77" steps="12400508"/></proof>
     <proof prover="5" timelimit="30" memlimit="4000"><result status="timeout" time="30.00" steps="4427784"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   <transf name="inline_goal" >
    <goal name="convertRStoAF&#39;vc.0.0.0" expl="postcondition">
    <transf name="split_all_full" >
     <goal name="convertRStoAF&#39;vc.0.0.0.0" expl="postcondition">
     <proof prover="1"><result status="highfailure" time="0.01"/></proof>
     <proof prover="3"><result status="timeout" time="0.70"/></proof>
     <proof prover="4"><result status="highfailure" time="0.41" steps="427608"/></proof>
     <proof prover="5"><result status="timeout" time="0.56" steps="39044"/></proof>
     <transf name="split_vc" >
      <goal name="convertRStoAF&#39;vc.0.0.0.0.0" expl="postcondition">
      <proof prover="1" timelimit="30" memlimit="4000"><result status="highfailure" time="0.01"/></proof>
      <proof prover="3" timelimit="30" memlimit="4000"><result status="timeout" time="22.62"/></proof>
      <proof prover="4" timelimit="30" memlimit="4000"><result status="highfailure" time="19.66" steps="4962125"/></proof>
      <proof prover="5" timelimit="30" memlimit="4000"><result status="timeout" time="30.00" steps="3566359"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="convertRStoAF&#39;vc.0.1" expl="postcondition">
   <proof prover="1" timelimit="5" memlimit="2000"><result status="highfailure" time="0.01"/></proof>
   <proof prover="3" timelimit="5" memlimit="2000"><result status="timeout" time="2.05"/></proof>
   <proof prover="4" timelimit="5" memlimit="2000"><result status="highfailure" time="2.36" steps="1193471"/></proof>
   <proof prover="5" timelimit="5" memlimit="2000"><result status="timeout" time="4.15" steps="187737"/></proof>
   <transf name="compute_hyp" >
    <goal name="convertRStoAF&#39;vc.0.1.0" expl="postcondition">
    <proof prover="1"><result status="highfailure" time="0.01"/></proof>
    <proof prover="3"><result status="timeout" time="1.00"/></proof>
    <proof prover="4"><result status="timeout" time="1.00" steps="1185813"/></proof>
    <proof prover="5"><result status="timeout" time="1.00" steps="62384"/></proof>
    <transf name="split_vc" >
     <goal name="convertRStoAF&#39;vc.0.1.0.0" expl="postcondition">
     <proof prover="1" timelimit="5" memlimit="2000"><result status="highfailure" time="0.01"/></proof>
     <proof prover="3" timelimit="5" memlimit="2000"><result status="timeout" time="5.00"/></proof>
     <proof prover="4" timelimit="5" memlimit="2000"><result status="timeout" time="5.00" steps="1451865"/></proof>
     <proof prover="5" timelimit="30" memlimit="4000"><undone/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   <transf name="inline_goal" >
    <goal name="convertRStoAF&#39;vc.0.1.0" expl="postcondition">
    <transf name="split_all_full" >
     <goal name="convertRStoAF&#39;vc.0.1.0.0" expl="postcondition">
     <proof prover="1"><result status="highfailure" time="0.01"/></proof>
     <proof prover="3"><result status="timeout" time="0.66"/></proof>
     <proof prover="4"><result status="timeout" time="1.00" steps="981020"/></proof>
     <proof prover="5"><result status="timeout" time="1.00" steps="57954"/></proof>
     <transf name="split_vc" >
      <goal name="convertRStoAF&#39;vc.0.1.0.0.0" expl="postcondition">
      <proof prover="1" timelimit="30" memlimit="4000"><result status="highfailure" time="0.01"/></proof>
      <proof prover="3" timelimit="30" memlimit="4000"><result status="timeout" time="23.46"/></proof>
      <proof prover="4" timelimit="30" memlimit="4000"><result status="highfailure" time="19.48" steps="11998923"/></proof>
      <proof prover="5" timelimit="30" memlimit="4000"><result status="timeout" time="30.00" steps="3430425"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="convertRStoAF&#39;vc.0.2" expl="postcondition" proved="true">
   <proof prover="5"><result status="valid" time="0.65" steps="37498"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="convertRStoAF&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="5"><result status="valid" time="0.49" steps="36307"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="convertPLtoAF&#39;vc" expl="VC for convertPLtoAF" proved="true">
 <proof prover="5"><result status="valid" time="0.64" steps="39022"/></proof>
 </goal>
 <goal name="convertAFtoPL&#39;vc" expl="VC for convertAFtoPL" proved="true">
 <proof prover="5"><result status="valid" time="0.65" steps="39302"/></proof>
 </goal>
 <goal name="convertAFtoRS&#39;vc" expl="VC for convertAFtoRS" proved="true">
 <proof prover="5"><result status="valid" time="0.66" steps="39868"/></proof>
 </goal>
 <goal name="convertPLtoAF_evaluation" proved="true">
 <proof prover="5"><result status="valid" time="0.57" steps="37986"/></proof>
 </goal>
 <goal name="convertAFtoPL_evaluation" proved="true">
 <proof prover="5"><result status="valid" time="0.57" steps="38100"/></proof>
 </goal>
 <goal name="PLtoAF_AFtoPL" proved="true">
 <proof prover="1"><result status="highfailure" time="0.01"/></proof>
 <proof prover="3"><result status="timeout" time="0.62"/></proof>
 <proof prover="4"><result status="timeout" time="1.00" steps="998035"/></proof>
 <proof prover="5"><result status="timeout" time="0.77" steps="46755"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="PLtoAF_AFtoPL.0" proved="true">
  <proof prover="1" timelimit="5" memlimit="2000"><result status="highfailure" time="0.01"/></proof>
  <proof prover="3" timelimit="5" memlimit="2000"><result status="timeout" time="3.94"/></proof>
  <proof prover="4" timelimit="5" memlimit="2000"><result status="highfailure" time="3.69" steps="1070978"/></proof>
  <proof prover="5" timelimit="5" memlimit="2000"><result status="unknown" time="1.65" steps="85466"/></proof>
  <transf name="inline_goal" proved="true" >
   <goal name="PLtoAF_AFtoPL.0.0" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="PLtoAF_AFtoPL.0.0.0" proved="true">
    <proof prover="1" timelimit="5" memlimit="2000"><result status="highfailure" time="0.01"/></proof>
    <proof prover="3" timelimit="30" memlimit="4000"><result status="valid" time="18.92"/></proof>
    <proof prover="4" timelimit="30" memlimit="4000"><result status="highfailure" time="21.68" steps="1269060"/></proof>
    <proof prover="5" timelimit="30" memlimit="4000"><result status="unknown" time="1.69" steps="90439"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="RStoAF_AFtoRS" proved="true">
 <proof prover="1"><result status="highfailure" time="0.01"/></proof>
 <proof prover="3"><result status="timeout" time="0.62"/></proof>
 <proof prover="4"><result status="timeout" time="1.00" steps="869927"/></proof>
 <proof prover="5"><result status="timeout" time="1.00" steps="50599"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="RStoAF_AFtoRS.0" proved="true">
  <proof prover="1" timelimit="5" memlimit="2000"><result status="highfailure" time="0.01"/></proof>
  <proof prover="3" timelimit="5" memlimit="2000"><result status="timeout" time="3.77"/></proof>
  <proof prover="4" timelimit="5" memlimit="2000"><result status="highfailure" time="3.72" steps="970781"/></proof>
  <proof prover="5" timelimit="5" memlimit="2000"><result status="unknown" time="1.73" steps="85445"/></proof>
  <transf name="inline_goal" proved="true" >
   <goal name="RStoAF_AFtoRS.0.0" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="RStoAF_AFtoRS.0.0.0" proved="true">
    <proof prover="1" timelimit="5" memlimit="2000"><result status="highfailure" time="0.01"/></proof>
    <proof prover="3" timelimit="30" memlimit="4000"><result status="valid" time="18.58"/></proof>
    <proof prover="4" timelimit="30" memlimit="4000"><result status="highfailure" time="21.94" steps="1637818"/></proof>
    <proof prover="5" timelimit="30" memlimit="4000"><result status="unknown" time="2.02" steps="90654"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="AFtoRS_RStoAF" proved="true">
 <proof prover="1"><result status="highfailure" time="0.01"/></proof>
 <proof prover="3"><result status="timeout" time="0.70"/></proof>
 <proof prover="4"><result status="highfailure" time="0.78" steps="865756"/></proof>
 <proof prover="5"><result status="timeout" time="1.00" steps="51316"/></proof>
 <transf name="compute_hyp" proved="true" >
  <goal name="AFtoRS_RStoAF.0" proved="true">
  <proof prover="5"><result status="valid" time="0.41" steps="40854"/></proof>
  </goal>
 </transf>
 <transf name="split_vc" >
  <goal name="AFtoRS_RStoAF.0">
  <proof prover="1" timelimit="5" memlimit="2000"><result status="highfailure" time="0.01"/></proof>
  <proof prover="3" timelimit="5" memlimit="2000"><result status="timeout" time="2.96"/></proof>
  <proof prover="4" timelimit="5" memlimit="2000"><result status="highfailure" time="2.19" steps="859495"/></proof>
  <proof prover="5" timelimit="5" memlimit="2000"><result status="unknown" time="1.80" steps="85595"/></proof>
  <transf name="inline_goal" >
   <goal name="AFtoRS_RStoAF.0.0">
   <transf name="split_all_full" >
    <goal name="AFtoRS_RStoAF.0.0.0">
    <proof prover="1" timelimit="30" memlimit="4000"><result status="highfailure" time="0.01"/></proof>
    <proof prover="3" timelimit="30" memlimit="4000"><result status="timeout" time="23.09"/></proof>
    <proof prover="4" timelimit="30" memlimit="4000"><result status="highfailure" time="22.08" steps="1254601"/></proof>
    <proof prover="5" timelimit="30" memlimit="4000"><result status="unknown" time="2.00" steps="90614"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Eval">
 <goal name="eval_setconjunction_singleton" proved="true">
 <proof prover="4"><result status="valid" time="0.17" steps="286928"/></proof>
 <proof prover="5"><result status="timeout" time="1.00" steps="79639"/></proof>
 </goal>
 <goal name="eval_commutes_add&#39;vc" expl="VC for eval_commutes_add" proved="true">
 <proof prover="1"><result status="highfailure" time="0.01"/></proof>
 <proof prover="3"><result status="timeout" time="1.00"/></proof>
 <proof prover="4"><result status="timeout" time="1.00" steps="2265357"/></proof>
 <proof prover="5"><result status="timeout" time="1.00" steps="89541"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="eval_commutes_add&#39;vc.0" expl="variant decrease" proved="true">
  <proof prover="5"><result status="valid" time="0.73" steps="47259"/></proof>
  </goal>
  <goal name="eval_commutes_add&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="1"><result status="highfailure" time="0.01"/></proof>
  <proof prover="3"><result status="timeout" time="1.00"/></proof>
  <proof prover="4"><result status="timeout" time="1.00" steps="516673"/></proof>
  <proof prover="5" timelimit="5" memlimit="2000"><result status="valid" time="1.00" steps="73671"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="add_eval" proved="true">
 <proof prover="5"><result status="valid" time="0.38" steps="42930"/></proof>
 </goal>
 <goal name="eval_clauselist_top_is_conj_eval_clause_top">
 <proof prover="1"><result status="highfailure" time="0.01"/></proof>
 <proof prover="3"><result status="timeout" time="1.00"/></proof>
 <proof prover="4"><result status="timeout" time="1.00" steps="1065625"/></proof>
 <proof prover="5"><result status="timeout" time="1.00" steps="79766"/></proof>
 <transf name="split_vc" >
  <goal name="eval_clauselist_top_is_conj_eval_clause_top.0">
  <proof prover="1" timelimit="5" memlimit="2000"><result status="highfailure" time="0.01"/></proof>
  <proof prover="3" timelimit="5" memlimit="2000"><result status="timeout" time="5.00"/></proof>
  <proof prover="4" timelimit="5" memlimit="2000"><result status="timeout" time="5.00" steps="4488159"/></proof>
  <proof prover="5" timelimit="5" memlimit="2000"><result status="timeout" time="5.00" steps="415770"/></proof>
  <transf name="compute_hyp" >
   <goal name="eval_clauselist_top_is_conj_eval_clause_top.0.0">
   <proof prover="0"><undone/></proof>
   <proof prover="1"><result status="highfailure" time="0.01"/></proof>
   <proof prover="2"><undone/></proof>
   <proof prover="3" timelimit="1800"><undone/></proof>
   <proof prover="4"><result status="timeout" time="1.00" steps="684493"/></proof>
   <proof prover="5"><result status="timeout" time="1.00" steps="70248"/></proof>
   <transf name="simplify_computations" >
    <goal name="eval_clauselist_top_is_conj_eval_clause_top.0.0.0">
    <proof prover="5" timelimit="5"><undone/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  <transf name="inline_goal" >
   <goal name="eval_clauselist_top_is_conj_eval_clause_top.0.0">
   <transf name="split_all_full" >
    <goal name="eval_clauselist_top_is_conj_eval_clause_top.0.0.0">
    <proof prover="1"><result status="highfailure" time="0.01"/></proof>
    <proof prover="3"><result status="timeout" time="1.00"/></proof>
    <proof prover="4"><result status="timeout" time="1.00" steps="716382"/></proof>
    <proof prover="5"><result status="timeout" time="1.00" steps="57052"/></proof>
    <transf name="split_vc" >
     <goal name="eval_clauselist_top_is_conj_eval_clause_top.0.0.0.0">
     <proof prover="1" timelimit="5" memlimit="2000"><result status="highfailure" time="0.01"/></proof>
     <proof prover="3" timelimit="5" memlimit="2000"><result status="timeout" time="5.00"/></proof>
     <proof prover="4" timelimit="5" memlimit="2000"><result status="timeout" time="5.00" steps="2593475"/></proof>
     <proof prover="5" timelimit="30" memlimit="4000"><undone/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="eval_clauselist_top_is_conj_eval_clause_top.1">
  <proof prover="1" timelimit="5" memlimit="2000"><result status="highfailure" time="0.01"/></proof>
  <proof prover="3" timelimit="30" memlimit="4000"><undone/></proof>
  <proof prover="4" timelimit="30" memlimit="4000"><result status="timeout" time="30.00" steps="3065221"/></proof>
  <proof prover="5" timelimit="30" memlimit="4000"><result status="unknown" time="1.41" steps="90753"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="eval_clauselist_bot_is_conj_eval_clause_bot">
 </goal>
 <goal name="all_x_top_then_eval_setconjunction_top&#39;vc" expl="VC for all_x_top_then_eval_setconjunction_top">
 </goal>
 <goal name="forall_eval_af_bot_exists_eval_af_bot&#39;vc" expl="VC for forall_eval_af_bot_exists_eval_af_bot">
 </goal>
 <goal name="eval_cl_bot_then_exists_eval_clause_bot&#39;vc" expl="VC for eval_cl_bot_then_exists_eval_clause_bot">
 </goal>
 <goal name="eval_append">
 </goal>
</theory>
<theory name="SAT">
 <goal name="rs_unsat_then_not_sat">
 </goal>
 <goal name="af_unsat_then_not_sat">
 </goal>
 <goal name="set_unsat_then_not_sat">
 </goal>
 <goal name="all_set_without_bot_eval_set&#39;vc" expl="VC for all_set_without_bot_eval_set">
 </goal>
 <goal name="bot_not_in_set_then_sat_set&#39;vc" expl="VC for bot_not_in_set_then_sat_set">
 </goal>
 <goal name="subset_of_satisfiable_set&#39;vc" expl="VC for subset_of_satisfiable_set">
 </goal>
 <goal name="satisfiable_clause">
 </goal>
 <goal name="sublist_is_satisfiable_clauselist">
 </goal>
 <goal name="sat_cl_bot_right">
 </goal>
 <goal name="sat_cl_bot_left">
 </goal>
 <goal name="not_unsat_set_sat_set">
 </goal>
 <goal name="not_unsat_clause_sat_clause">
 </goal>
 <goal name="not_unsat_sat">
 </goal>
 <goal name="not_sat_unsat">
 </goal>
 <goal name="unsat_then_bot">
 </goal>
 <goal name="is_unsat_then_p_is_bot">
 </goal>
 <goal name="unsat_permut">
 </goal>
</theory>
<theory name="ListPlus">
 <goal name="sublist&#39;vc" expl="VC for sublist">
 </goal>
 <goal name="equality_is_equal_list&#39;vc" expl="VC for equality_is_equal_list">
 </goal>
 <goal name="is_equal_list_reflexive&#39;vc" expl="VC for is_equal_list_reflexive">
 </goal>
 <goal name="is_equal_list_commutative&#39;vc" expl="VC for is_equal_list_commutative">
 </goal>
 <goal name="tuple_equality&#39;vc" expl="VC for tuple_equality">
 </goal>
 <goal name="permut_ref">
 </goal>
 <goal name="permut_trans">
 </goal>
 <goal name="permut_cl1_cl2">
 </goal>
 <goal name="concat_with_element">
 </goal>
 <goal name="num_occ_permut_concat&#39;vc" expl="VC for num_occ_permut_concat">
 </goal>
 <goal name="num_occ_concat&#39;vc" expl="VC for num_occ_concat">
 </goal>
 <goal name="num_occ_1_plus_tail&#39;vc" expl="VC for num_occ_1_plus_tail">
 </goal>
 <goal name="num_occ_permut_list&#39;vc" expl="VC for num_occ_permut_list">
 </goal>
 <goal name="permut_list_permut_sublist&#39;vc" expl="VC for permut_list_permut_sublist">
 </goal>
</theory>
<theory name="RemoveFromList">
 <goal name="removeFromList_numocc">
 </goal>
 <goal name="removeFromList_numocc_not_elem">
 </goal>
 <goal name="removeFromList_length">
 </goal>
 <goal name="removeFromList_concat_not_mem_l1">
 </goal>
 <goal name="removeFromList_concat">
 </goal>
 <goal name="removeFromList_permut">
 </goal>
 <goal name="removeFromList_permut_concat">
 </goal>
 <goal name="removeFromList_elem_not_in_list">
 </goal>
 <goal name="removeFromList_sublist">
 </goal>
</theory>
<theory name="FindOneSubset">
 <goal name="findOneSubset_if_only_if_some">
 </goal>
 <goal name="findOneSubset_mem_subset">
 </goal>
 <goal name="findOneSubset_nil">
 </goal>
 <goal name="findOneSubset_notsubset">
 </goal>
</theory>
<theory name="SetOfSymbols">
 <goal name="if_mem_then_subset_set_smb">
 </goal>
 <goal name="subset_set_smb_clauselist">
 </goal>
 <goal name="sublist_subset_set_smb">
 </goal>
</theory>
<theory name="Horn_Logic">
 <goal name="algorithmA_spec&#39;vc" expl="VC for algorithmA_spec">
 </goal>
 <goal name="permutacoes&#39;vc" expl="VC for permutacoes">
 </goal>
 <goal name="monotone_algA&#39;vc" expl="VC for monotone_algA">
 </goal>
 <goal name="smb&#39;vc" expl="VC for smb">
 </goal>
 <goal name="unsat_cl_mem_ABot_in_algorithmA&#39;vc" expl="VC for unsat_cl_mem_ABot_in_algorithmA">
 </goal>
 <goal name="not_mem_ABot_then_cl_sat&#39;vc" expl="VC for not_mem_ABot_then_cl_sat">
 </goal>
 <goal name="sat_cl_not_ABot_in_algorithmA&#39;vc" expl="VC for sat_cl_not_ABot_in_algorithmA">
 </goal>
 <goal name="mem_ABot_then_cl_unsat&#39;vc" expl="VC for mem_ABot_then_cl_unsat">
 </goal>
 <goal name="horn_logic&#39;vc" expl="VC for horn_logic">
 </goal>
 <goal name="horn_sat_completeness">
 </goal>
 <goal name="horn_unsat_completeness">
 </goal>
</theory>
<theory name="Horn">
 <goal name="length_equal_listset_to_list_fset">
 </goal>
 <goal name="removeFromList_prog&#39;vc" expl="VC for removeFromList_prog">
 </goal>
 <goal name="algorithmA&#39;vc" expl="VC for algorithmA">
 </goal>
 <goal name="horn&#39;vc" expl="VC for horn">
 </goal>
</theory>
</file>
</why3session>
