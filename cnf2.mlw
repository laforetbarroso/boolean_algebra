module Aux

  use formula2.PropositionalFormula
  use int.Int, list.List
  
  let rec function size (phi : formula) : int
    ensures{ result >= 0 } 
  = match phi with
    | Neg phi1 -> 1 + size phi1
    | And phi1 phi2 | Or phi1 phi2 | Impl phi1 phi2 ->
      1 + size phi1 + size phi2
    | _ -> 1
    end
  
  let rec function size_cnf_clause (phi : cnf_clause) : int
    ensures{ result >= 0 }
  = match phi with
    | Nil -> 0
    | Cons _ tl -> 1 + size_cnf_clause tl
    end
  
  let rec function size_cnf (phi : cnf) : int
    ensures{ result >= 0 }
  = match phi with
    | Nil -> 0
    | Cons _ tl -> 1 + size_cnf tl
    end
  
  predicate is_impl_free (phi : formula)
  = match phi with
  | Prop _ -> True
  | Var _ -> True
  | Neg phi1 -> is_impl_free phi1
  | Or phi1 phi2 | And phi1 phi2 -> is_impl_free phi1 /\ is_impl_free phi2
  | Impl _ _ -> False
  end
  
  predicate is_nnfc (phi : formula)
  = is_impl_free phi /\ 
  match phi with
  | Prop _ -> True
  | Var _ -> True
  | Neg (Prop _) -> True
  | Neg (Var _) -> True
  | Neg _ -> False
  | Or phi1 phi2 | And phi1 phi2 -> 
    is_nnfc phi1 /\ is_nnfc phi2
  | Impl _ _ -> False
  end
  
  lemma nnfc_is_implfree:
    forall phi: formula. is_nnfc phi -> is_impl_free phi 
  
  predicate is_cnf_clause (phi : formula)
   = is_impl_free phi /\ is_nnfc phi /\
  match phi with
    | Prop _ -> true
    | Var _ -> true
    | Neg (Prop _) -> true
    | Neg (Var _) -> true
    | Neg _ -> false
    | Or phi1 phi2 -> is_cnf_clause phi1 /\ is_cnf_clause phi2
    | And _ _ -> false
    | Impl _ _ -> false
  end 
  
  lemma cnf_clause_is_implfree:
    forall phi: formula. is_cnf_clause phi -> is_impl_free phi
  
  lemma cnf_clause_is_nnfc:
    forall phi: formula. is_cnf_clause phi -> is_nnfc phi
  
  predicate is_cnf (phi : formula)
  = is_impl_free phi /\ is_nnfc phi /\
  match phi with
  | Prop _ -> true
  | Var _ -> true
  | Neg (Prop _) -> true
  | Neg (Var _) -> true
  | Neg _ -> false
  | Or phi1 phi2 -> is_cnf_clause phi1 /\ is_cnf_clause phi2
  | And phi1 phi2 -> is_cnf phi1 /\ is_cnf phi2
  | Impl _ _ -> false
  end
  
  lemma cnf_clause_is_cnf:
    forall phi: formula. is_cnf_clause phi -> is_cnf phi
  
  lemma cnf_is_implfree:
    forall phi: formula. is_cnf phi -> is_impl_free phi 
  
  lemma cnf_is_nnfc:
    forall phi: formula. is_cnf phi -> is_nnfc phi 
    
  lemma cnf_clause:
    forall phi1 phi2: formula. is_cnf (Or phi1 phi2) -> (is_cnf_clause phi1 /\ is_cnf_clause phi2)
end

module T

  use boolean_algebra.SwitchingAlgebra, formula2.PropositionalFormula,Aux 
  use int.Int, list.List, list.Append, list.Mem
  
  let rec function impl_free (phi : formula) : formula
    variant{ size phi }
    ensures{ forall v. eval phi v = eval result v /\ is_impl_free result}
  = match phi with
    | Prop t -> Prop t
    | Var i -> Var i
    | Neg phi1 -> Neg (impl_free phi1)
    | Or phi1 phi2 -> Or (impl_free phi1) (impl_free phi2)
    | And phi1 phi2 -> And (impl_free phi1) (impl_free phi2)
    | Impl phi1 phi2 -> Or (Neg (impl_free phi1)) (impl_free phi2)
    end

  let rec function nnfc (phi: formula)
    requires{ is_impl_free phi }
    variant{ size phi }
    ensures{ (forall v. eval phi v = eval result v) /\ is_impl_free phi /\ is_nnfc result }
  = match phi with
    | Neg (Neg phi1) -> nnfc phi1
    | Neg (And phi1 phi2) -> Or (nnfc (Neg phi1)) (nnfc (Neg phi2))
    | Neg (Or phi1 phi2) -> And (nnfc (Neg phi1)) (nnfc (Neg phi2))
    | And phi1 phi2 -> And (nnfc phi1) (nnfc phi2)
    | Or phi1 phi2 -> Or (nnfc phi1) (nnfc phi2)
    | _ -> phi
  end

  let rec function distr (phi1 phi2: formula)
    requires{ is_impl_free phi1 /\ is_impl_free phi2 /\ is_nnfc phi1 /\ is_nnfc phi2 /\ is_cnf phi1 /\ is_cnf phi2}
    variant{ size phi1 + size phi2 }
    ensures{ (forall v. ((eval phi1 v \*/ eval phi2 v) = eval result v)) /\ is_impl_free result /\ is_nnfc result /\ is_cnf result }
  = match phi1, phi2 with
    | And phi11 phi12, phi2 -> And (distr phi11 phi2) (distr phi12 phi2)
    | phi1, And phi21 phi22 -> And (distr phi1 phi21) (distr phi1 phi22)
    | _ , _ -> Or phi1 phi2
    end
    
  
  let rec function cnfc (phi: formula)
    requires{ is_impl_free phi /\ is_nnfc phi }
    variant{ phi }
    ensures{ (forall v. eval phi v = eval result v) /\ is_impl_free phi /\ is_nnfc result /\ is_cnf result }
  = match phi with
    | Or phi1 phi2 -> distr (cnfc phi1) (cnfc phi2)
    | And phi1 phi2 -> And (cnfc phi1) (cnfc phi2)
    | _ -> phi
  end
  
  let function t (phi: formula) : formula
    ensures{ forall v. eval phi v = eval result v /\ is_impl_free result /\ is_nnfc result /\ is_cnf result }
  = cnfc (nnfc (impl_free phi))
  
  (*** Translantion Functions ***)
  
  let rec function to_cnf_type_aux (phi: formula) : cnf_clause
    requires{ is_impl_free phi /\ is_nnfc phi /\ is_cnf_clause phi }
    variant{size phi}
    ensures{ forall v. eval phi v = eval_cnf_clause result v }
  = match phi with
    | Prop b -> Cons (B b) Nil
    | Var i -> Cons (I i) Nil
    | Neg (Prop b) -> Cons (Nb b) Nil
    | Neg (Var i)  -> Cons (Ni i) Nil
    | Or phi1 phi2 -> (to_cnf_type_aux phi1) ++ (to_cnf_type_aux phi2)
    end
    
  let rec function to_cnf_type (phi: formula) : cnf
    requires{ is_impl_free phi /\ is_nnfc phi /\ is_cnf phi }
    variant{size phi}
    ensures{ forall v. eval phi v = eval_cnf result v }
  = match phi with
    | And phi1 phi2 -> (to_cnf_type phi1) ++ (to_cnf_type phi2)
    | _ -> Cons (to_cnf_type_aux phi) Nil
    end
  
  let rec function to_formula_aux (phi: cnf_clause) : formula
    variant{ size_cnf_clause phi }
    ensures{ forall v. eval_cnf_clause phi v = eval result v /\ is_impl_free result /\ is_nnfc result /\ is_cnf_clause result }
  = match phi with
    | Nil -> Prop bot
    | Cons (B b) Nil -> Prop b
    | Cons (I i) Nil -> Var i
    | Cons (Nb b) Nil -> Neg (Prop b)
    | Cons (Ni i) Nil -> Neg (Var i)
    | Cons (B b) t -> Or (Prop b) (to_formula_aux t)
    | Cons (I i) t -> Or (Var i) (to_formula_aux t)
    | Cons (Nb b) t -> Or (Neg (Prop b)) (to_formula_aux t)
    | Cons (Ni i) t -> Or (Neg (Var i)) (to_formula_aux t)
    end
   
  let rec function to_formula (phi: cnf) : formula
    requires{ not is_nil phi}
    variant{ size_cnf phi }
    ensures{ forall v. eval_cnf phi v = eval result v /\ is_impl_free result /\ is_nnfc result /\ is_cnf result }
  = match phi with
    | Cons h Nil -> (to_formula_aux h)
    | Cons h t -> And (to_formula_aux h) (to_formula t)
    end
  
  lemma t_equiv :
    forall f : formula. f == t f
  
  lemma equiv_to_cnf :
    forall f : formula. is_cnf f -> f =.= to_cnf_type f
  
  lemma equiv_to_cnf2 :
    forall f : formula. f =.= to_cnf_type (t f)
  
  lemma refl0 :
    forall f1 f2 : formula. f1 == f2 -> equiv_cnf (to_cnf_type (t f1)) (to_cnf_type (t f2))
    
  lemma refl1 :
    forall f1 f2 : formula. is_cnf f1 /\ is_cnf f2 /\ f1 == f2 -> equiv_cnf (to_cnf_type f1) (to_cnf_type f2)
  
  lemma refl2 :
    forall f1 f2: cnf. equiv_cnf f1 f2 -> (to_formula f2) == (to_formula f2)
  
  lemma absurd_cnf:
    forall f : cnf.
    forall v : i -> b.
      exists x. mem x f /\ (eval_cnf_clause x v) = bot <-> (eval_cnf f v) = bot
  
 end